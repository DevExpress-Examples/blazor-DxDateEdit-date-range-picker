@page "/"

<style>
    .my-class + * {
        display: flex;
        align-items: center;
    }
</style>

<DxFormLayout CaptionPosition="CaptionPosition.Vertical">
    <DxFormLayoutItem Caption="Start:" ColSpanMd="3">
        <DxDateEdit Date="@StartDate" DateChanged=@((DateTime newValue) => StartChanged(newValue))></DxDateEdit>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="End:" ColSpanMd="3">
        <DxDateEdit Date="@EndDate" DateChanged=@((DateTime newValue) => EndChanged(newValue))></DxDateEdit>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Duration (days):" ColSpanMd="2" CaptionCssClass="my-class">
        <span>@Duration</span>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Minimum duration:" ColSpanMd="2">
        <DxSpinEdit Value=@MinDuration MinValue="0" MaxValue="10" ValueChanged=@((int newValue) => MinDurationChanged(newValue))></DxSpinEdit>
    </DxFormLayoutItem>
    <DxFormLayoutItem Caption="Maximum duration:" ColSpanMd="2">
        <DxSpinEdit Value=@MaxDuration MinValue="50" MaxValue="365" ValueChanged=@((int newValue) => MaxDurationChanged(newValue))></DxSpinEdit>
    </DxFormLayoutItem>
</DxFormLayout>

@code{
    public DateTime StartDate { get; set; } = DateTime.Today;
    public DateTime EndDate { get; set; } = DateTime.Today.AddDays(1);
    public string Duration { get { return EndDate.Subtract(StartDate).Days.ToString(); } }
    public int MinDuration { get; set; } = 0;
    public int MaxDuration { get; set; } = 50;

    void StartChanged(DateTime newDate) {
        StartDate = newDate;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            EndDate = StartDate.AddDays(MinDuration);
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            EndDate = StartDate.AddDays(MaxDuration);
        InvokeAsync(StateHasChanged);
    }
    void EndChanged(DateTime newDate) {
        EndDate = newDate;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            StartDate = EndDate.AddDays(-MinDuration);
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            StartDate = EndDate.AddDays(-MaxDuration);
        InvokeAsync(StateHasChanged);
    }
    void MinDurationChanged(int newDuration) {
        MinDuration = newDuration;
        if (EndDate.Subtract(StartDate).Days < MinDuration)
            EndDate = StartDate.AddDays(MinDuration);
        InvokeAsync(StateHasChanged);
    }
    void MaxDurationChanged(int newDuration) {
        MaxDuration = newDuration;
        if (EndDate.Subtract(StartDate).Days > MaxDuration)
            EndDate = StartDate.AddDays(MaxDuration);
        InvokeAsync(StateHasChanged);
    }
}
